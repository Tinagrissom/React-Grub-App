{"ast":null,"code":"var _jsxFileName = \"/Users/Tina/Downloads/01-starting-project-3/src/components/Meals/AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Card from \"../UI/Card\";\nimport MealItem from \"./MealItem/MealItem\";\nimport classes from \"./AvailableMeals.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState();\n  useEffect(() => {\n    // cannot pass a function to useEffect that returns a promise\n    // must create a new function and use async there, into a nested inner function\n    const fetchMeals = async () => {\n      const response = await fetch(\"https://react-movie-faa6c-default-rtdb.firebaseio.com/meals\").then();\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const responseData = await response.json();\n      const loadedMeals = []; // responseData will return an object, but we want an\n      // array, so we transform with loadedMeals\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price // transforming the fetched data\n\n        });\n      }\n\n      setMeals(loadedMeals); // setting the tranformed data as the array of meals in our useState hook\n\n      setIsLoading(false);\n      console.log(loadedMeals);\n    };\n\n    fetchMeals().catch(error => {\n      setIsLoading(false);\n      setHttpError(error.message);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.mealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.mealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"6pndJp/WWpMtmhSnoCH9k0tFnXc=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["/Users/Tina/Downloads/01-starting-project-3/src/components/Meals/AvailableMeals.js"],"names":["useEffect","useState","Card","MealItem","classes","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMeals","response","fetch","then","ok","Error","responseData","json","loadedMeals","key","push","id","name","description","price","console","log","catch","error","message","mealsLoading","mealsError","mealsList","map","meal"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport Card from \"../UI/Card\";\nimport MealItem from \"./MealItem/MealItem\";\nimport classes from \"./AvailableMeals.module.css\";\n\nconst AvailableMeals = () => {\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState();\n\n  useEffect(() => {\n    // cannot pass a function to useEffect that returns a promise\n    // must create a new function and use async there, into a nested inner function\n    const fetchMeals = async () => {\n      const response = await fetch(\n        \"https://react-movie-faa6c-default-rtdb.firebaseio.com/meals\"\n      ).then();\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const responseData = await response.json();\n\n      const loadedMeals = [];\n      // responseData will return an object, but we want an\n      // array, so we transform with loadedMeals\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price,\n          // transforming the fetched data\n        });\n      }\n      setMeals(loadedMeals);\n      // setting the tranformed data as the array of meals in our useState hook\n      setIsLoading(false);\n      console.log(loadedMeals);\n    };\n\n    fetchMeals().catch((error) => {\n      setIsLoading(false);\n      setHttpError(error.message);\n    });\n  }, []);\n\n  if (isLoading) {\n    return (\n      <section className={classes.mealsLoading}>\n        <p>Loading....</p>\n      </section>\n    );\n  }\n\n  if (httpError) {\n    return (\n      <section className={classes.mealsError}>\n        <p>{httpError}</p>\n      </section>\n    );\n  }\n\n  const mealsList = meals.map((meal) => (\n    <MealItem\n      key={meal.id}\n      id={meal.id}\n      name={meal.name}\n      description={meal.description}\n      price={meal.price}\n    />\n  ));\n\n  return (\n    <section className={classes.meals}>\n      <Card>\n        <ul>{mealsList}</ul>\n      </Card>\n    </section>\n  );\n};\n\nexport default AvailableMeals;\n"]},"metadata":{},"sourceType":"module"}